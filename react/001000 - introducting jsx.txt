JSX stands for JavaScript XML.

It is simply a syntax extension of JavaScript.

JSX allows us to write HTML in React.

It describe what the UI should look like

JSX produces React “elements”.

You can put any valid JavaScript expression inside the curly braces in JSX.
    const name = 'Josh Perez';
    const element = <h1>Hello, {name}</h1>;

Specifying Attributes with JSX
    quotes
        const element = <a href="https://www.reactjs.org"> link </a>;

    curly braces
        const element = <img src={user.avatarUrl}></img>;

    Don’t put quotes around curly braces when embedding a JavaScript expression in an attribute. 
    You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.

    Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.
    For example, class becomes className in JSX, and tabindex becomes tabIndex.

Basically, by using JSX you can write concise HTML/XML-like structures (e.g., DOM like tree structures) in the same file as 
you write JavaScript code, then Babel will transform these expressions into actual JavaScript code

The syntax is intended to be used by preprocessors (i.e., transpilers like Babel) to transform HTML-like text found in JavaScript files 
into standard JavaScript objects

JSX Represents Objects
    Babel compiles JSX down to React.createElement() calls.

    These two examples are identical:
        ex1
            const element = (
                <h1 className="greeting">
                    Hello, world!
                </h1>
            );

        ex2
            const element = React.createElement(
                'h1',
                {className: 'greeting'},
                'Hello, world!'
            );

    These objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen. 
    React reads these objects and uses them to construct the DOM and keep it up to date.
