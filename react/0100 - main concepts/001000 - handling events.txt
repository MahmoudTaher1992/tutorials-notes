Handling Events
    Handling events with React elements is very similar to handling events on DOM elements
        React events are named using camelCase, rather than lowercase.
        
        With JSX you pass a function as the event handler, rather than a string.

        You cannot return false to prevent default behavior in React. You must call preventDefault explicitly

    A common pattern is for an event handler to be a method on the class
        You have to be careful about the meaning of this in JSX callbacks. 
        In JavaScript, class methods are not bound by default. 
        If you forget to bind this.handleClick and pass it to onClick, 
        this will be undefined when the function is actually called.

        If Bounding is annoying - you have 2 solutions
            public class fields syntax
                // This syntax ensures `this` is bound within handleClick.
                // Warning: this is *experimental* syntax.
                handleClick = () => {
                    console.log('this is:', this);
                }

            Arrow function 
                <button onClick={() => this.handleClick()}>
                    Click me
                </button>
                
                Cons
                    Performance down
                        Different callback is created each time the LoggingButton renders

                        If this callback is passed as a prop to lower components, those components might do an extra 
                        re-rendering

    Passing Arguments to Event Handlers
        <button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
        <button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

        In both cases a new function is created each render > Cons of arrow function

                    
