React component State
    The state is a built-in React object that is used to contain data or information about the component.

    A component’s state can change over time; whenever it changes, the component re-renders. 

    Guidlines
        A state can be modified based on user action or network changes

        Every time the state of an object changes, React re-renders the component to the browser

        The state object is initialized in the constructor

        The state object can store multiple properties

    The setState() Method
        The setState() method enqueues all of the updates made to the component state and instructs React to re-render the 
        component and its children with the updated state.

        Always use the setState() method to change the state object, since it will ensure that the component knows it’s 
        been updated and calls the render() method.

        this.setState() is used to change the value of the state object

        setState() function performs a shallow merge between the new and the previous state

        setState(null) will update nothing and will remo nothing as well

    State Updates May Be Asynchronous
        React may batch multiple setState() calls into a single update for performance.

        Because this.props and this.state may be updated asynchronously, you should not rely on their values for
        calculating the next state.

        To fix it, use a second form of setState() that accepts a function rather than an object. That function will 
        receive the previous state as the first argument, and the props at the time the update is applied as the second 
        argument:
            this.setState((state, props) => ({
                counter: state.counter + props.increment
            }));

    The Data Flows Down
        Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t
        care whether it is defined as a function or a class.

        A component may choose to pass its state down as props to its child components

        This is commonly called a “top-down” or “unidirectional” data flow

        If you imagine a component tree as a waterfall of props, each component’s state is like an additional water 
        source that joins it at an arbitrary point but also flows down.