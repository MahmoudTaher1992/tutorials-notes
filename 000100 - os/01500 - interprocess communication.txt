Inter-process communication (IPC)
    > processes in the system may be
        > independent
            > can not be affected by other processes in the system
        > cooperating
            > can be affected by other processes
            > share the same data
            > work together to achieve a big task quickly, AKA speedup
            > modularity

    > IPC is required by the cooperating processes to exchange data and information
    > IPC communication types
        > shared memory
            > a region of the memory is shared by multiple process
            > processes can read and write the data to the shared memory
        > message passing
            > messages exchanged between the processes
            > the os takes care of delivering the message to the target process

    > Shared memory systems
        > shared memory is established between the cooperating processes
        > each process that wills to enter the group of cooperating processes must share it's memory address
        > os will prevent process from accessing their memory unless they approve

        > i.e. (producer consumer problem)
            > a problem when a process is creating a output that id used by another process
            > some times the consumer process takes incomplete segment of the data
            > a solution is a shared memory in which a buffer of items are filled by the producer and consumed by the consumer
            > the must work in sync so that they don't be blocked or produce corrupted outputs

        > Buffers types
            > Unbounded buffer
                > no limit on the size of the buffer
                > the producer is not limited
                > the consumer may wait if the buffer is empty

            > Bounded buffer
                > their is a specific size of the buffer
                > the producer may wait if the buffer it full
                > the consumer may wait if the buffer is empty

    > Message passing system
        > allows the communication to happen between the processes if the process are on different systems (distributed systems)
        > it is done by 
            > send message operation
            > receive message operation
        > a message can be of 
            > fixed size
            > variable size
        > a communication link must exist between the processes for it to start messaging

        > communication link implementation logic
            > Direct/Indirect communications
            > Sync/Async communications
            > Automatic/Explicit buffering
        
        > Direct/Indirect communications
            > Direct
                > the sender must know the name(identity) of the receiver
                > the link is associated with two processes only
                > between two processes, one link exists only

                > symmetric
                    > the sender and the receiver must know each other
                > asymmetric
                    > the sender know the receiver but not vise versa

            > Indirect
                > the messages are sent/received through a mailbox
                > each mailbox has a unique identifier
                > processes send to the mailbox and the receiver reads from the mailbox
                > the link is established if the processes have the same shared mailbox
                > the mailbox maybe shared between more that two processes
                > when the message reaches the mailbox
                    > all the processes may read it
                    > the system may choose which process should read it (based on a criteria)

        > Sync/Async communications
            > Also known as Blocking/non-blocking 
            > blocking
                > the sender and the receiver is blocked until the message is received
            > non-blocking
                > the sender and the receiver is are not blocked

        > buffering
            > messages pass through a queue before being sent
            > implementation
                > zero capacity
                    > the sender is blocked from sending messages until the buffer is free again (1 message at a time)
                > bounded capacity
                    > the sender is blocked after the buffer is full (depending on it's size)
                > unbounded capacity 
                    > the sender is never blocked (the buffer can have infinite messages)