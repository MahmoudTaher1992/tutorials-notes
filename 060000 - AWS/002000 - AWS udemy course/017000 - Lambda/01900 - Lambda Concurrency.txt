Lambda Concurrency
    > Concurrency and Throttling
        > Concurrency limit = 1000 concurrent executions
        > you can set a reserved concurrency limit
            > if the concurrency exceeded the limit a throttle error will be thrown
                > sync invocations will have the error as the return value
                > async invocations will also have the error but it will retry until it succeeds or returned to DLQ
                    > it may return the event to it's queue
        > if you need a higher limit open a support ticket

    > Cold start
        > when lambda is initialized
            > the code is loaded
            > the code outside the handler will run
        > if the initialization time is long, first request served by new instances will have a higher latency than the others

        > Provisioned concurrency
            > the solution for the cold start

            > the number of pre-initialized environments you want to allocate to your function
                > those environments are prepared to respond immediately to incoming requests

    > concurrency
        > the number of in flight request that the lambda function is handling at the same time
        > for each concurrent request, lambda function starts a new instance of the execution environment
        > lambda function starts new environments until the account concurrency limit is reached
        > the limit is 1000 concurrent executions across all functions in the region
            > this limit can be increased by contacting AWS support
        
        > lambda invokes your function in secure and isolated execution environment
            > lambda first initializes the execution environment (init phase)
                > here the code is loaded and the code outside the handler is executed
            > then it invokes the function (invoke phase)
                > the code inside the handler is executed

            > during the entire process, the execution environment is busy and cannot be reused
            > when lambda function finishes the first execution, it will be ready to handle another request without initializing the environment again

        > when a new request comes, lambda will check if there is an available pre initialized environment
            > if there is, it will invoke the function
            > if there is not, it will initialize a new environment and then invoke the function
