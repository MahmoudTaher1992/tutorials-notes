Scope and Scope chain
    Scope
        refers to the accessability or visibility of variables

        Its importance
            ownership of variables
            avoid name collision

        Nested scopes
            if you create a function nested inside another function, the child function has an inner scope that is wrapped
            inside the outer scope > so it has access to the variables declared in the outer scope

        Types
            Global Scope
                variables and functions can be accessed from any where in the code

            Function Scope
                All variables inside the function can be accessed inside the function not from outside

            Block Scope
                All variables inside the block can be accessed inside the function not from outside

                let and const work only in this Scope

    Lexical Scope
        organizing and accessing variables are controlled by where the function is declared not where it is called

        i.e.
            let name = "omar";

            function printName() {
                console.log(name);
            }

            function hof() {
                let name = "Taher";
                printName();
            }

            hof(); // omar

    Scope chain
        is the way how a js looks for variables, it starts with the inner scope > then outer scope >
        and goes up till it reaches to the global scope > otherwise it throws an error

    Closure
        Closure means that an inner function always has access to the variables and parameters of its outer function, 
        even after the outer function has returned.

        Its the ability of a function to remember the variables and functions that are declared in its outer scope.

        This ability of a function to store a variable for further reference even after it is executed is called Closure

        i.e. 1
            function OuterFunction() {

                var outerVariable = 1;

                function InnerFunction() {
                    alert(outerVariable);
                }

                InnerFunction();
            }

        i.e. 2
            function OuterFunction() {

                var outerVariable = 100;

                function InnerFunction() {
                    alert(outerVariable);
                }

                return InnerFunction;
            }
            var innerFunc = OuterFunction();

            innerFunc(); // 100


