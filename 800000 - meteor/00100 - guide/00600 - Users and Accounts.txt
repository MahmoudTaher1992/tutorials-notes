Users and Accounts
    > Features in core Meteor
        > userId in DDP
            > DDP is a websocket like protocol
            > userId field is always there in the DDP connection
            > this built-in feature will insure that there is a userId in the methods and publication, both on client and server

        > accounts-base package
            > core package used for user accounts functionality
            > includes
                > a user collection with a standard schema
                    > accessed through
                        > Meteor.users
                        > client-side
                            > Meteor.userId()
                            > Meteor.user()
                
                > generic methods that tracks login state, log out, validate users, ...
            > automatically added if you used `accounts-password`
            
    > password-login
        > fully-featured password login system
        > Requiring username or email
            > Accounts.createUser
                > allows you to create a user with email or username or both
                > implement Accounts.validateNewUser to validate the user
        
        > Multiple emails
            > it stores the email in an array field to allow for multiple emails

        > Case sensitivity
            > there is no way to ensure case sensitivity on MongoDb
            > it is implemented in the package instead
            > when you want ot query the user by email, use Accounts.findUserByUsername or Accounts.findUserByEmail

    > Loading and displaying user data
        > Currently logged in user
            > client side
                > use Meteor.userId() to get the userId
                > Meteor.user() to get the user
            > server side
                > there is no global user
                > use this.userId to get the userId in the method
        > The Meteor.users collection
            > there is a default users collection that is added by Meteor
            > access it using Meteor.users
            > important notes
                > don't include the passwords and secrets when you query the collection and deliver it to the client
                > when you try to query by email and username, you have to make sure it is case insensitive

    > Custom data about users
        > if you want to add more data about the user, just use the users collection
        > ways
            > Add top-level fields onto the user document
            > adjust the user data in Accounts.onCreateUser
            > Don't use profile field
                > somehow the client can write to the profile field, hence they can override the data easily
        > pushing custom data
            > you have to be careful about pushing data from users collection as it may expose sensitive data
        > Preventing unnecessary data retrieval
            > avoid storing data that grows contentiously in the user document, because it gets queried when the user logs in or out
            > there is a solution to prevent that from happening, see the docs

    > Roles and permissions
        > we implement our own rights system
            