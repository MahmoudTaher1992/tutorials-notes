Hooks API Reference
    useContext
        returns the current context value for that context > instead of 
            Class.contextType
            <Context.Consumer>

        i.e.
            useContext(MyContext)

    useCallback
        memoized callback.

        i.e.
            const memoizedCallback = useCallback(
                () => {
                    doSomething(a, b);
                },
                [a, b],
            );

        useCallback will return a memoized version of the callback that only changes if 
        one of the dependencies has changed

        This is useful when passing callbacks to optimized child components that rely on reference equality to 
        prevent unnecessary renders

        useCallback(fn, deps) is equivalent to useMemo(() => fn, deps).

    useMemo
        Returns a memoized value.

        i.e.
            const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

        useMemo will only recompute the memoized value when one of the dependencies has changed > This optimization helps 
        to avoid expensive calculations on every render.

        useMemo runs during rendering > no side effects are allowed

        If no array is provided, a new value will be computed on every render.

        you should try to optimize the performance of your code before using the useMemo > sometimes it is skipped and 
        recalculated when the memory is low

    useRef
        to create ref in functional component

    useId
        to create unique id

    useLayoutEffect
        The signature is identical to useEffect, but it fires synchronously after all DOM mutations. 

        Use this to read layout from the DOM and synchronously re-render. 

        Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.

        It is recommend starting with useEffect first and only trying useLayoutEffect if that causes a problem.

        Server rendering have a problem w. useLayoutEffect and useEffect > check docs
