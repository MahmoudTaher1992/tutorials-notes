JSX stands for JavaScript XML.

It is simply a syntax extension of JavaScript and allows us to write HTML in React.

JSX produces “React elements”. which describe what the UI should look like. React reads these objects and uses them to construct the DOM and 
keep it up to date.

You can put any valid JavaScript expression inside the curly braces in JSX.
    const name = 'Josh Perez';
    const element = <h1>Hello, {name}</h1>;

Specifying Attributes with JSX
    quotes
        const element = <a href="https://www.reactjs.org"> link </a>;

    curly braces
        const element = <img src={user.avatarUrl}></img>;

    Don’t put quotes around curly braces when embedding a JavaScript expression in an attribute. 
    You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.

    Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.
    For example, class becomes className in JSX, and tabindex becomes tabIndex.

JSX makes you write concise HTML/XML-like structures 

The syntax is intended to be used by preprocessors (i.e., transpilers like Babel) to transform HTML-like text found in JavaScript files 
into standard JavaScript objects

JSX Represents Objects
    Babel compiles JSX down to React.createElement() calls.

    These two examples are identical:
        ex1
            const element = (
                <h1 className="greeting">
                    Hello, world!
                </h1>
            );

        ex2
            const element = React.createElement(
                'h1',
                {className: 'greeting'},
                'Hello, world!'
            );
    
