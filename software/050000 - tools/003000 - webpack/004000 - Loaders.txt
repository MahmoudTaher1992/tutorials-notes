Loaders
    > webpack only understands JavaScript and JSON files
    > are transformations that are applied to the source code of a module
    > pre-process files as you import or “load” them
    > can transform files from a different language (like TypeScript) to JavaScript
    > allow webpack to process other types of files
        > convert them into valid modules to be
          consumed by your application and added to the dependency graph
        > Module is a piece of code referred to by import
    > To config loaders edit add a rule to module.rules property
        > i.e.
            module.exports = {
                output: {
                    filename: 'my-first-webpack.bundle.js',
                },
                module: {
                    rules: [{ test: /\.txt$/, use: 'raw-loader' }],
                },
            };
        > test
            > a property identifies which file or files should be transformed
        > use
            > a property indicates which loader should be used to do the transforming
        > analogy
            > "Hey webpack compiler, when you come across a path that resolves to a '.txt' file inside of a 
              require()/import statement, use the raw-loader to transform it before you add it to the bundle."

    > Inline Loaders
        > Not recommended as it will increase boilerplate in your source code
        > i.e.
            import Styles from 'style-loader!css-loader?modules!./styles.css';
            import Styles from '!style-loader!css-loader?modules!./styles.css';
            import Styles from '!!style-loader!css-loader?modules!./styles.css';
            import Styles from '-!style-loader!css-loader?modules!./styles.css';

    > Loaders are evaluated/executed from right to left (or from bottom to top)

    > Features
        > Loaders can be chained. Each loader in the chain applies transformations to the processed resource
          The first loader passes its result (resource with applied transformations) to the next one, and so forth
          Finally, webpack expects JavaScript to be returned by the last loader in the chain.
        > can be synchronous or asynchronous
        > run in Node.js
        > can be configured with an options object
        > Normal modules can export a loader in addition to the normal main via package.json with the loader field
        > Plugins can give loaders more features.
        > Loaders can emit additional arbitrary files

    > Resolving Loaders
        > Loaders follow the standard module resolution
        > In most cases it will be loaded from the module path "node_modules"
        > A loader module is expected to export a function and be written in Node.js compatible JavaScript