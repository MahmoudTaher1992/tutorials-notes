How to do a code review
    > pros
        > maintain code best practices/consistencies
        > educate others on the new code
        > increase bus factor
            > bus factor
                > is a way to measure the risk of key person leaving the team
                > it refers to the number of people who would need to be hit by a bus (or quit) before the project is in trouble
                > i.e.
                    > a project with a bus factor of 1
                        > the project will be at trouble if that one person leaves
                    > a project with a bus factor of 20
                        > the project will be at trouble if 20 people leave

                > the higher the bus factor, the better
        > allows for discussions

    > delegate some of the work (and focus on things that can not be automated)
        > linting
        > typechecking
        > ...

    > Be aware of
        > Bike shedding
            > give attention to trivial things and neglecting the big ones

        > Be respectful
            > approach the wrong code with polite questions rather than accusation

        > Use DM over public comments
        > Be specific and descriptive

    > steps
        > Figure out what is this code doing?
            > read more about the issue to understand the introduced change
                > if you don't understand the issue, ask for clarification
            > read the code line by line

        > Tests
            > Are there tests for the new code?
                > If not, Why not ?!!
            > Use a test coverage tool to see if the new code is covered
            > Do tests cover all the requirements?
            > Are the tests easy to understand? (if not, it will be hard to understand the codebase and maintain it)
            > Do tests match tests criteria? 
                > check against checklist/documentation
            > Think of important test cases that are not in the requirements
            > Are the tests exist in the right level?
                > some tests should not run in CI, instead they run overnight
            > You (reviewer) can write some tests (if it is allowed in the reviewing process)

        > Functionality
            > Do a real test (run it locally), does it work as expected?
            > Are all the requirements met?
            > Is the build process normal? (i.e. no errors, no warnings, not slowed down, ...)

        > Readability and maintainability
            > Namings are clear
            > Is the code understandable?
            > Are error messages clear?
            > Are the confusing sections commented, documented, or tested descriptively?
            > Are the documentations updated ?

        > Review the design
            > SOLID principles are not violated
            > New design patterns are ok, if any
            > Does the code follow the current practices?
            > Is the code in the right place
            > Could the new code reused something that already exists?
            > Is the code over engineered?
            > Folder structure
            > Error handling

        > Performance   
            > Does the code have any performance requirements?
                > general performance requirements
                > specific performance requirements
                    > related to the issue itself
                        > i.e.
                            > the issue is about a slow page, so the issue should contain a performance requirement (load time should not exceed 2s)
            > Are the limitation/performance tests added ?

            > Note that, without performance tests you are relying on the users to notify you with it's issues
            > Has the new code negatively affected the original performance tests ?
            > Calls outside the app are expensive
                > database calls are optimized
                > unnecessary calls are optimized/removed
            
            > Using resources efficiently
                > check there are no memory leaks
                > check there are no infinite growing objects
                > check all connections/streams are closed

            > Check race conditions
            > Check caching
    
        > Data structures are well used
            > Lists
                > not used in too much searching
                > not used in too much sorting
            > Maps
                > no much iteration and reordering is used

        > Security
            > Are there tests for security aspects ?
            > Do new paths/routes have authentication?
            > Does the new data need to be encrypted?
            > Secretes are stored and used correctly
            > logging is done correctly
                > CRUD operations are logged
                > Start and end time of performance critical operations are logged
                > Logging levels are right 

        > Compile your review
            > Add comments to the code
            > Put the feedback summary in the PR
                > List down the things you learned from the code review

        > Follow up on the code review 
            > it is not a one time thing

